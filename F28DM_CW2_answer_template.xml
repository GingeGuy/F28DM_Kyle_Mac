<data>

<!--UPDATE WITH YOUR USERNAME -->
    <USERNAME>km2113</USERNAME>

<!--START OF EXAMPLE -->
    <question id="0">
        <answer>1094</answer>
        <sql>
            SELECT COUNT(*) FROM trajectory.tracking;
        </sql>
    </question>
<!--END OF EXAMPLE -->

<!--START OF YOUR ANSWERS and SQL STATEMENTS-->

    <question id="1">
        <answer> The Lodger </answer>
        <sql>
          SELECT title 
          FROM imdb.movies 
          ORDER BY year ASC;
        </sql>
    </question>

    <question id="2">
        <answer> 2 </answer>
        <sql>
           SELECT count(*) 
           FROM ( 
           SELECT movieid
           FROM imdb.movies2directors 
           GROUP BY movieid 
           HAVING count(directorid) > 7 );
        </sql>
    </question>

    <question id="3">
        <answer> 1940 </answer>
        <sql>
           SELECT year 
           FROM imdb.movies 
           JOIN ( 
           SELECT movieid 
           FROM imdb.movies2directors 
           GROUP BY movieid 
           ORDER BY count(directorid) DESC LIMIT 1)d 
           ON imdb.movies.movieid = d.movieid;
        </sql>
    </question>

    <question id="4">
        <answer> 2500324 </answer>
        <sql>
            <![CDATA[
           SELECT count(notth), notth FROM ( 
           SELECT a.actorid AS notth, b.actorid AS th
           FROM imdb.movies2actors a, imdb.movies2actors b 
           WHERE a.actorid <> b.actorid
           AND a.movieid = b.movieid
           AND b.actorid = '643265' )
           GROUP BY notth
           ORDER BY count DESC 
           LIMIT 1;
            ]]>
        </sql>
    </question>

    <question id="5">
        <answer> 3 </answer>
        <sql>
            <![CDATA[
           SELECT count(*)
           FROM (
           SELECT one.actorid AS a, two.actorid AS b, count(*)
           FROM imdb.movies2actors one
           JOIN imdb.movies2actors two
           ON one.movieid = two.movieid
           WHERE one.actorid < two.actorid
           GROUP BY one.actorid, two.actorid
           HAVING count(*) > 10);
            ]]>
        </sql>
    </question>

    <question id="6">
        <answer> 1930 </answer>
        <sql>
           SELECT (imdb.movies.year / 10) * 10 
           FROM imdb.movies
           INNER JOIN imdb.ratings
           ON movies.movieid = ratings.movieid
           GROUP BY ((year/10) * 10)
           ORDER BY avg(cast(imdb.ratings.rank AS decimal)) DESC
           LIMIT 1;
        </sql>
    </question>

    <question id="7">
        <answer> 15 </answer>
        <sql>
           SELECT count(movieid) 
           FROM imdb.movies2directors 
           WHERE genre IS null;
        </sql>
    </question>

    <question id="8">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="9">
        <answer> 154945 </answer>
        <sql>
           SELECT directorid
           FROM imdb.movies2directors
           INNER JOIN imdb.runningtimes
           ON movies2directors.movieid = runningtimes.movieid
           WHERE time1 > 160
           GROUP BY directorid
           ORDER BY count(*) DESC
           LIMIT 1;
        </sql>
    </question>

    <question id="10">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="11">
        <answer> 74 </answer>
        <sql>
           SELECT count(*)
           FROM scenicornot.locations
           WHERE ST_DWithin(
           scenicornot.locations.geom_bng,
           ST_SetSRID(ST_MakePoint(530000, 180000), 27700), 5000 );
        </sql>
    </question>

    <question id="12">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="13">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="14">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="15">
        <answer> 2024-01-28 00:00:00 </answer>
        <sql>
           SELECT DATE_BIN('48 hours', datetime, TIMESTAMP '2010-01-01 00:00:00') AS eq, count(*) AS datetime
           FROM quakes.scotquakes
           GROUP BY eq
           ORDER BY count(*) DESC
           LIMIT 1;
        </sql>
    </question>

    <question id="16">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="17">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="18">
        <answer> 1.171 </answer>
        <sql>
           SELECT avg(spd) 
           FROM trajectory.tracking
           WHERE userid = 'p3';
        </sql>
    </question>

    <question id="19">
        <answer> p1 </answer>
        <sql>
           SELECT userid, count(userid)
           FROM trajectory.tracking
           GROUP BY userid
           LIMIT 1;
        </sql>
    </question>

    <question id="20">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="21">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="22">
        <answer> 8 </answer>
        <sql>
           SELECT EXTRACT(MONTH FROM date_taken) AS m, count(*) AS months
           FROM flickr.flickr_edin
           GROUP BY m
           ORDER BY months DESC 
           LIMIT 1;
        </sql>
    </question>


    <question id="23">
        <answer> 19473027@N00 </answer>
        <sql>
           SELECT userid
           FROM flickr.flickr_edin AS e
           JOIN flickr.grid100m AS g
           ON ST_Intersects(e.geom, g.geom)
           GROUP BY userid
           ORDER BY count(DISTINCT g.id) DESC
           LIMIT 1;
        </sql>
    </question>

    <question id="24">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="25">
        <answer></answer>
        <sql>
       
        </sql>
    </question>


<!--END OF ANSWERS -->

</data>
